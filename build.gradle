buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

plugins {
	id "com.github.jk1.tcdeps" version "0.17"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven'

group = 'org.javacs'
version = '0.1.1'

mainClassName = "org.javacs.kt.MainKt"
description = "Code completions, diagnostics and more for Kotlin"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def debugPort = 8000
def debugArgs = "-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n,quiet=y"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

kotlin {
	experimental {
		coroutines 'enable'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.gradle.org/gradle/libs-releases' }
	teamcityServer {
		url = teamCityUrl
		credentials {
			username = teamCityUsername
			password = teamCityPassword
		}
	}
}

configurations {
	kotlinJVMLib
}

dependencies {
	def kotlinTeamCity = "$kotlinBuildType:$kotlinBuild:kotlin-plugin-${kotlinPluginBuild}.zip!/Kotlin"

	implementation "com.google.guava:guava:21.0"
	implementation "org.gradle:gradle-tooling-api:4.3"
	implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.5.0"

	implementation "org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion"
	implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
	kotlinJVMLib tc("$kotlinTeamCity/lib/kotlin-plugin.jar")
	kotlinJVMLib tc("$kotlinTeamCity/lib/j2k.jar")

	implementation fileTree(dir: "lib", include: ["*.jar"])
	implementation fileTree(dir: "lib-kotlin", include: ["*.jar"])
	testImplementation "org.hamcrest:hamcrest-all:1.3"
	testImplementation "junit:junit:4.10"
	testImplementation "org.openjdk.jmh:jmh-core:1.20"
	testImplementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlinVersion"
	annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.20"
}

configurations.all { config ->
	config.resolutionStrategy {
		preferProjectModules()
	}
}

test {
	testLogging {
		events "failed"
		exceptionFormat "short"
	}
}

run {
	standardInput = System.in
}

task copyKotlinJVMLib(type: Copy) {
	from configurations.kotlinJVMLib
	into "$projectDir/lib-kotlin"
}

task fixFilePermissions(type: Exec) {
	// When running on macOS or Linux the start script
	// needs executable permissions to run.
	onlyIf { !System.getProperty("os.name").toLowerCase().contains("windows") }
	commandLine 'chmod', '+x', 'build/install/kotlin-language-server/bin/kotlin-language-server'
}

task debugRun(type: JavaExec) {
	main = mainClassName
	classpath sourceSets.main.runtimeClasspath
	standardInput = System.in
	
	println "Configured debugPort to $debugPort"
	jvmArgs debugArgs
}

task debugStartScripts(type: CreateStartScripts) {
	applicationName = startScripts.applicationName
	mainClassName = startScripts.mainClassName
	outputDir = installDist.destinationDir.toPath().resolve('bin').toFile()
	classpath = startScripts.classpath
	defaultJvmOpts = [debugArgs]
}

task installDebugDist(type: Sync) {
	dependsOn installDist
	finalizedBy debugStartScripts
}

applicationDistribution.into('bin') {
	fileMode = 0755
}

compileKotlin.dependsOn copyKotlinJVMLib
installDist.finalizedBy fixFilePermissions
build.finalizedBy installDist
